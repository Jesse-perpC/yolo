group = 'tv.ustream.yolo'
version = '2.0.2'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:2.0.2'
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'idea'
apply plugin: 'deb'
apply plugin: 'application'

sourceCompatibility = '1.7'
targetCompatibility = '1.7'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenCentral()
}

dependencies {
    compile 'commons-cli:commons-cli:1.2'
    compile 'com.google.code.gson:gson:2.2.+'
    compile 'com.timgroup:java-statsd-client:2.0.0'
    compile 'commons-io:commons-io:2.4'
    compile 'org.slf4j:slf4j-log4j12:1.7.+'
    testCompile 'junit:junit:4.+'
    testCompile 'org.mockito:mockito-all:1.10.+'
    testCompile 'com.jayway.awaitility:awaitility:1.3.+'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2'
}

tasks.withType(Jar) {
    manifest {
        from "manifest.mf"
    }

    from "LICENCE.md"

    file("${buildDir}/VERSION").with {
        parentFile.mkdirs()
        write(version)
        from it
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task applicationJar(type: Jar, dependsOn: classes) {
    archiveName = "${baseName}.${extension}"
    from files(project.sourceSets.main.output.classesDir)
    from project.configurations.runtime.collect {
        zipTree(it)
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives jar
}

task debian(type: Deb, dependsOn: applicationJar) {
    vendor = 'Ustream, Inc.'
    url = 'https://github.com/ustream/yolo'
    packageDescription = 'Yolo - Log tailing and parsing framework in Java'
    license = 'The MIT License (MIT)'
    user 'root'
    permissionGroup 'root'
    from(applicationJar.archivePath) {
        into '/usr/lib/yolo'
    }
    from('yolo') {
        into '/usr/bin/'
        fileMode 0755
    }
}

configurations {
    debianArchives
}

artifacts {
    debianArchives debian
}

uploadDebianArchives {
    repositories {
        maven {
            url yoloMavenRepoUrl
            credentials {
                username yoloMavenRepoUsername
                password yoloMavenRepoPassword
            }
        }
    }
}

signing {
    sign configurations.archives
}

gradle.taskGraph.whenReady {taskGraph ->
    signArchives.onlyIf { taskGraph.hasTask(uploadArchives) }
}

task uberjar(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from configurations.runtime.asFileTree.files.collect { zipTree(it) }

    manifest {
        attributes 'Main-Class': 'tv.ustream.yolo.Yolo'
    }
}

uploadArchives {
    repositories {
        mavenDeployer {

            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: yoloSonatypeUsername, password: yoloSonatypePassword)
            }

            pom.project {
                name 'Yolo'
                packaging 'jar'
                description 'Log tailing and parsing framework in Java'
                url 'https://github.com/ustream/yolo'

                scm {
                    url 'scm:git@github.com:ustream/yolo.git'
                    connection 'scm:git@github.com:ustream/yolo.git'
                    developerConnection 'scm:git@github.com:ustream/yolo.git'
                }

                licenses {
                    license {
                        name 'MIT License (MIT)'
                        url 'http://opensource.org/licenses/MIT'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'bandesz'
                        name 'Andras Szabo'
                    }
               }
            }
        }
    }
}
