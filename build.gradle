group = 'tv.ustream.yolo'
version = '1.0.16'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.kenshoo:gradle-fpm:0.4'
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'idea'
apply plugin: 'fpm-packaging'

sourceCompatibility = '1.7'
targetCompatibility = '1.7'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenCentral()
}

dependencies {
    compile 'commons-cli:commons-cli:1.2'
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'com.timgroup:java-statsd-client:2.0.0'
    compile 'commons-io:commons-io:2.4'
    compile 'org.slf4j:slf4j-log4j12:1.7.5'
    testCompile 'junit:junit:4.10'
    testCompile 'org.mockito:mockito-all:1.9.5'
    testCompile 'com.jayway.awaitility:awaitility:1.3.4'
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.6'
}

tasks.withType(Jar) {
    manifest {
        from "manifest.mf"
    }

    from "LICENCE.md"

    file("${buildDir}/VERSION").with {
        parentFile.mkdirs()
        write(version)
        from it
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task applicationJar(type: Jar) {
    archiveName = "${baseName}.${extension}"
    from files(project.sourceSets.main.output.classesDir)
    from project.configurations.runtime.collect {
        zipTree(it)
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives jar
}

ext.distDir = "${buildDir}/dist"

task buildDist(dependsOn: applicationJar) << {
    ant.copy(file: "${applicationJar.archivePath}", todir: "${distDir}/usr/lib/yolo")
    ant.copy(file: "yolo", todir: "${distDir}/usr/bin/")
    ant.chmod(file: "${distDir}/usr/bin/yolo", perm: "755")
}

debian.dependsOn buildDist

packaging {
    baseDir = distDir
    extraOptions = [
            '-a': 'all',
            '--vendor': 'Ustream, Inc.',
            '--maintainer': 'Andras Szabo <bandesz@ustream.tv>',
            '--url': 'https://github.com/ustream/yolo',
            '--description': 'Yolo - Log tailing and parsing framework in Java',
    ]
    force = true
}

signing {
    sign configurations.archives
}

gradle.taskGraph.whenReady {taskGraph ->
    signArchives.onlyIf { taskGraph.hasTask(uploadArchives) }
}

uploadArchives {
    repositories {
        mavenDeployer {

            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.project {
                name 'Yolo'
                packaging 'jar'
                description 'Log tailing and parsing framework in Java'
                url 'https://github.com/ustream/yolo'

                scm {
                    url 'scm:git@github.com:ustream/yolo.git'
                    connection 'scm:git@github.com:ustream/yolo.git'
                    developerConnection 'scm:git@github.com:ustream/yolo.git'
                }

                licenses {
                    license {
                        name 'MIT License (MIT)'
                        url 'http://opensource.org/licenses/MIT'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'bandesz'
                        name 'Andras Szabo'
                    }
               }
            }
        }
    }
}
